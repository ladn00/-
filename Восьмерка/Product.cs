//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Восьмерка
{
    using System;
    using System.Collections.Generic;
    using System.Windows.Media;

    public partial class Product
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Product()
        {
            this.ProductCostHistory = new HashSet<ProductCostHistory>();
            this.ProductMaterial = new HashSet<ProductMaterial>();
            this.ProductSale = new HashSet<ProductSale>();
        }
    
        public int ID { get; set; }
        public string Title { get; set; }
        public Nullable<int> ProductTypeID { get; set; }
        public string ArticleNumber { get; set; }
        public string Description { get; set; }
        public string Image { get; set; }
        public Nullable<int> ProductionPersonCount { get; set; }
        public Nullable<int> ProductionWorkshopNumber { get; set; }
        public decimal MinCostForAgent { get; set; }
        
        public string ImagePath
        {
            get
            {
                if (Image == "нет")
                    return "products/picture.png";
                else
                    return Image.Substring(1, Image.Length -1);
            }
        }
        public string ImageForWins
        {
            get
            {
                return AppDomain.CurrentDomain.BaseDirectory + "..\\..\\" + "Pages/" + ImagePath;
            }
        }

        public string Materials
        {
            get
            {
                string result = "";
                if (ProductMaterial.Count == 0)
                    return "нет";
                foreach(ProductMaterial el in ProductMaterial)
                {
                    result += el.Material.Title + ", ";
                }
                return result.Substring(0, result.Length - 2);
            }
        }
        public decimal Cost 
        {
            get
            {
                decimal result = 0;
                if (ProductMaterial.Count == 0)
                    return 0;
                foreach (ProductMaterial el in ProductMaterial)
                {
                    result += el.Material.Cost;
                }
                return result;
            }
        }
        public SolidColorBrush ForeColor
        {
            get
            {
                var list = new List<ProductSale>();
                foreach(var el in ProductSale)
                {
                    if (el.SaleDate.Month == DateTime.Now.Month - 1)
                        list.Add(el);
                }
                if (list.Count == 0)
                    return Brushes.DarkRed;
                else
                    return Brushes.Black;
            }
        }
        public virtual ProductType ProductType { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductCostHistory> ProductCostHistory { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductMaterial> ProductMaterial { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductSale> ProductSale { get; set; }
    }
}
